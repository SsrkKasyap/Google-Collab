from google.colab import drive
drive.mount('/content/drive')

from keras.layers import Activation, Conv2D, MaxPooling2D, Dropout, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
import os
from matplotlib import pyplot as plt
import numpy as np
from sklearn import metrics
from sklearn.metrics import confusion_matrix

IMG_HEIGHT = 48
IMG_WIDTH = 48
batch_size = 32
epochs = 125

train_data_dir = '/content/drive/MyDrive/Facial_Emotion_dataset/test'
validation_data_dir = '/content/drive/MyDrive/Facial_Emotion_dataset/train'

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=30,
    shear_range=0.3,
    zoom_range=0.3,
    horizontal_flip=True,
    fill_mode='nearest')

validation_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    color_mode='grayscale',
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=True)

validation_generator = validation_datagen.flow_from_directory(
    validation_data_dir,
    color_mode='grayscale',
    target_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=True)

# Verify our generator by plotting a few faces and printing corresponding labels
class_labels = ['Angry', 'Disgust', 'Fear', 'Happy', 'Neutral', 'Sad', 'Surprise']

img, label = train_generator.__next__()

import random

i = random.randint(0, (img.shape[0])-1)
image = img[i]
labl = class_labels[label[i].argmax()]
plt.imshow(image[:, :, 0], cmap='gray')
plt.title(labl)
plt.show()

##########################################################
### Write Code To Create Model:
# Conv1 layer with as many kernels you want,
# MaxPool layer
# Dropout layer
# Conv2 layer with as many kernels you want,
# MaxPool layer
# Dropout layer
# Conv3 layer with as many kernels you want,
# MaxPool layer
# Dropout layer

# Flattening
# Connect to Dense layer with 256 dimension
# Dropout Layer
# connect to output layer

# Create the model
model = Sequential()

# Conv1 layer
model.add(Conv2D(32, (3, 3), input_shape=(IMG_HEIGHT, IMG_WIDTH, 1)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

# Conv2 layer
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

# Conv3 layer
model.add(Conv2D(128, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

# Flening
model.add(Flatten())

# Dense layer
model.add(Dense(256))
model.add(Activation('relu'))
model.add(Dropout(0.5))

# Output layer
model.add(Dense(len(class_labels)))
model.add(Activation('softmax'))

# Compile the model
model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

# Calculate the number of training and testing images
num_train_imgs = train_generator.n
num_test_imgs = validation_generator.n

# Train the model
model.fit_generator(
    train_generator,
    steps_per_epoch=num_train_imgs // batch_size,
    epochs=epochs,
    validation_data=validation_generator,
    validation_steps=num_test_imgs // batch_size)

### Test the model
# Generate a batch of images
test_img, test_lbl = validation_generator.__next__()
predictions = model.predict(test_img)

predictions = np.argmax(predictions, axis=1)
test_labels = np.argmax(test_lbl, axis=1)

print("Accuracy = ", metrics.accuracy_score(test_labels, predictions))

# Confusion Matrix - verify accuracy of each class
cm = confusion_matrix(test_labels, predictions)
#print(cm)
